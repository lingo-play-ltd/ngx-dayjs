{"version":3,"file":"ngx-dayjs.js.map","sources":["ng://ngx-dayjs/add.pipe.ts","ng://ngx-dayjs/date-format.pipe.ts","ng://ngx-dayjs/difference.pipe.ts","ng://ngx-dayjs/from-unix.pipe.ts","ng://ngx-dayjs/parse.pipe.ts","ng://ngx-dayjs/subtract.pipe.ts","ng://ngx-dayjs/dayjs.module.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amAdd' })\nexport class AddPipe implements PipeTransform {\n    transform(value: any, amount: any, unit?: any): any {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('AddPipe: missing required arguments');\n        }\n        return dayjs(value).add(amount, unit);\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amDateFormat' })\nexport class DateFormatPipe implements PipeTransform {\n  transform(value: any, ...args: any[]): string {\n    if (!value) { return ''; }\n    return dayjs(value).format(args[0]);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amDifference' })\nexport class DifferencePipe implements PipeTransform {\n  transform(value: any, otherValue: any,  unit?: any, precision?: boolean): number {\n\n    const date = dayjs(value);\n    const date2 = (otherValue !== null) ? dayjs(otherValue) : dayjs();\n\n    return date.diff(date2, unit, precision);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amFromUnix' })\nexport class FromUnixPipe implements PipeTransform {\n  transform(value: any, ...args: string[]): any {\n    if (typeof value === 'string') {\n      value = +value;\n    }\n    return dayjs.unix(value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amParse' })\nexport class ParsePipe implements PipeTransform {\n  transform(value: string, format: string): any {\n    return dayjs(value).format(format);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amSubtract' })\nexport class SubtractPipe implements PipeTransform {\n    transform(value: any, amount: any, unit?: any): any {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('SubtractPipe: missing required arguments');\n        }\n        return dayjs(value).subtract(amount, unit);\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { AddPipe } from './add.pipe';\nimport { DateFormatPipe } from './date-format.pipe';\nimport { DifferencePipe } from './difference.pipe';\nimport { FromUnixPipe } from './from-unix.pipe';\nimport { ParsePipe } from './parse.pipe';\nimport { SubtractPipe } from './subtract.pipe';\n\nconst ANGULAR_DAYJS_PIPES = [\n  AddPipe,\n  DateFormatPipe,\n  DifferencePipe,\n  FromUnixPipe,\n  ParsePipe,\n  SubtractPipe,\n];\n\n@NgModule({\n  declarations: ANGULAR_DAYJS_PIPES,\n  exports: ANGULAR_DAYJS_PIPES\n})\nexport class DayjsModule { }\n"],"names":["dayjs"],"mappings":"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"}
