{
  "version": 3,
  "file": "ngx-dayjs.js",
  "sources": [
    "ng://ngx-dayjs/out/dayjs.module.ts",
    "ng://ngx-dayjs/out/subtract.pipe.ts",
    "ng://ngx-dayjs/out/parse.pipe.ts",
    "ng://ngx-dayjs/out/from-unix.pipe.ts",
    "ng://ngx-dayjs/out/difference.pipe.ts",
    "ng://ngx-dayjs/out/date-format.pipe.ts",
    "ng://ngx-dayjs/out/add.pipe.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\n\nimport { AddPipe } from './add.pipe';\nimport { DateFormatPipe } from './date-format.pipe';\nimport { DifferencePipe } from './difference.pipe';\nimport { FromUnixPipe } from './from-unix.pipe';\nimport { ParsePipe } from './parse.pipe';\nimport { SubtractPipe } from './subtract.pipe';\n\nconst ANGULAR_DAYJS_PIPES = [\n  AddPipe,\n  DateFormatPipe,\n  DifferencePipe,\n  FromUnixPipe,\n  ParsePipe,\n  SubtractPipe,\n];\n\n@NgModule({\n  declarations: ANGULAR_DAYJS_PIPES,\n  exports: ANGULAR_DAYJS_PIPES\n})\nexport class DayjsModule { }\n",
    "import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amSubtract' })\nexport class SubtractPipe implements PipeTransform {\n    transform(value: any, amount: any, unit?: any): any {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('SubtractPipe: missing required arguments');\n        }\n        return dayjs(value).subtract(amount, unit);\n    }\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amParse' })\nexport class ParsePipe implements PipeTransform {\n  transform(value: string, format: string): any {\n    return dayjs(value).format(format);\n  }\n}\n",
    "import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amFromUnix' })\nexport class FromUnixPipe implements PipeTransform {\n  transform(value: any, ...args: string[]): any {\n    if (typeof value === 'string') {\n      value = +value;\n    }\n    return dayjs(value).unix();\n  }\n}\n",
    "import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amDifference' })\nexport class DifferencePipe implements PipeTransform {\n  transform(value: any, otherValue: any,  unit?: any, precision?: boolean): number {\n\n    const date = dayjs(value);\n    const date2 = (otherValue !== null) ? dayjs(otherValue) : dayjs();\n\n    return date.diff(date2, unit, precision);\n  }\n}\n",
    "import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amDateFormat' })\nexport class DateFormatPipe implements PipeTransform {\n  transform(value: any, ...args: any[]): string {\n    if (!value) { return ''; }\n    return dayjs(value).format(args[0]);\n  }\n}\n",
    "import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amAdd' })\nexport class AddPipe implements PipeTransform {\n    transform(value: any, amount: any, unit?: any): any {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('AddPipe: missing required arguments');\n        }\n        return dayjs(value).add(amount, unit);\n    }\n}\n"
  ],
  "names": [
    "dayjs"
  ],
  "mappings": ";;;;;;;AMAA,AAEA,MAAM,KAAK,GAAG,MAAM,CAAC;AAGrB,AAAA,MAAA,OAAA,CAAA;;;;;;;IACI,SAAS,CAAC,KAAU,EAAE,MAAW,EAAE,IAAU,EAAjD;QACQ,IAAI,OAAO,MAAM,KAAK,WAAW,KAAK,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,WAAW,CAAC,EAAE;YAC9F,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;SAC1D;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KACzC;;;IAPL,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM,EAAE,IAAI,EAAE,OAAO,EAAE,EAAvB,EAAA;;;;;;;ADJA,AAEA,MAAMA,OAAK,GAAG,MAAM,CAAC;AAGrB,AAAA,MAAA,cAAA,CAAA;;;;;;IACE,SAAS,CAAC,KAAU,EAAE,GAAG,IAAW,EAAtC;QACI,IAAI,CAAC,KAAK,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAC1B,OAAOA,OAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KACrC;;;IALH,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM,EAAE,IAAI,EAAE,cAAc,EAAE,EAA9B,EAAA;;;;;;;ADJA,AAEA,MAAMA,OAAK,GAAG,MAAM,CAAC;AAGrB,AAAA,MAAA,cAAA,CAAA;;;;;;;;IACE,SAAS,CAAC,KAAU,EAAE,UAAe,EAAG,IAAU,EAAE,SAAmB,EAAzE;QAEI,uBAAM,IAAI,GAAGA,OAAK,CAAC,KAAK,CAAC,CAAC;QAC1B,uBAAM,KAAK,GAAG,CAAC,UAAU,KAAK,IAAI,IAAIA,OAAK,CAAC,UAAU,CAAC,GAAGA,OAAK,EAAE,CAAC;QAElE,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;KAC1C;;;IARH,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM,EAAE,IAAI,EAAE,cAAc,EAAE,EAA9B,EAAA;;;;;;;ADJA,AAEA,MAAMA,OAAK,GAAG,MAAM,CAAC;AAGrB,AAAA,MAAA,YAAA,CAAA;;;;;;IACE,SAAS,CAAC,KAAU,EAAE,GAAG,IAAc,EAAzC;QACI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,KAAK,GAAG,CAAC,KAAK,CAAC;SAChB;QACD,OAAOA,OAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;KAC5B;;;IAPH,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM,EAAE,IAAI,EAAE,YAAY,EAAE,EAA5B,EAAA;;;;;;;ADJA,AAEA,MAAMA,OAAK,GAAG,MAAM,CAAC;AAGrB,AAAA,MAAA,SAAA,CAAA;;;;;;IACE,SAAS,CAAC,KAAa,EAAE,MAAc,EAAzC;QACI,OAAOA,OAAK,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KACpC;;;IAJH,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM,EAAE,IAAI,EAAE,SAAS,EAAE,EAAzB,EAAA;;;;;;;ADJA,AAEA,MAAMA,OAAK,GAAG,MAAM,CAAC;AAGrB,AAAA,MAAA,YAAA,CAAA;;;;;;;IACI,SAAS,CAAC,KAAU,EAAE,MAAW,EAAE,IAAU,EAAjD;QACQ,IAAI,OAAO,MAAM,KAAK,WAAW,KAAK,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,WAAW,CAAC,EAAE;YAC9F,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC/D;QACD,OAAOA,OAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KAC9C;;;IAPL,EAAA,IAAA,EAAC,IAAI,EAAL,IAAA,EAAA,CAAM,EAAE,IAAI,EAAE,YAAY,EAAE,EAA5B,EAAA;;;;;;;ADJA,AASA,MAAM,mBAAmB,GAAG;IAC1B,OAAO;IACP,cAAc;IACd,cAAc;IACd,YAAY;IACZ,SAAS;IACT,YAAY;CACb,CAAC;AAMF,AAAA,MAAA,WAAA,CAAA;;;IAJA,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,YAAY,EAAE,mBAAmB;gBACjC,OAAO,EAAE,mBAAmB;aAC7B,EAAD,EAAA;;;;;;;;;;;;;;;;;;"
}
