{"version":3,"file":"ngx-dayjs.umd.js.map","sources":["ng://ngx-dayjs/add.pipe.ts","ng://ngx-dayjs/date-format.pipe.ts","ng://ngx-dayjs/difference.pipe.ts","ng://ngx-dayjs/from-unix.pipe.ts","ng://ngx-dayjs/parse.pipe.ts","ng://ngx-dayjs/subtract.pipe.ts","ng://ngx-dayjs/dayjs.module.ts"],"sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amAdd' })\nexport class AddPipe implements PipeTransform {\n    transform(value: any, amount: any, unit?: any): any {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('AddPipe: missing required arguments');\n        }\n        return dayjs(value).add(amount, unit);\n    }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amDateFormat' })\nexport class DateFormatPipe implements PipeTransform {\n  transform(value: any, ...args: any[]): string {\n    if (!value) { return ''; }\n    return dayjs(value).format(args[0]);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amDifference' })\nexport class DifferencePipe implements PipeTransform {\n  transform(value: any, otherValue: any,  unit?: any, precision?: boolean): number {\n\n    const date = dayjs(value);\n    const date2 = (otherValue !== null) ? dayjs(otherValue) : dayjs();\n\n    return date.diff(date2, unit, precision);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amFromUnix' })\nexport class FromUnixPipe implements PipeTransform {\n  transform(value: any, ...args: string[]): any {\n    if (typeof value === 'string') {\n      value = +value;\n    }\n    return dayjs.unix(value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amParse' })\nexport class ParsePipe implements PipeTransform {\n  transform(value: string, format: string): any {\n    return dayjs(value).format(format);\n  }\n}\n","import {Pipe, PipeTransform} from '@angular/core';\nimport * as dayjs_ from 'dayjs';\nconst dayjs = dayjs_;\n\n@Pipe({ name: 'amSubtract' })\nexport class SubtractPipe implements PipeTransform {\n    transform(value: any, amount: any, unit?: any): any {\n        if (typeof amount === 'undefined' || (typeof amount === 'number' && typeof unit === 'undefined')) {\n            throw new Error('SubtractPipe: missing required arguments');\n        }\n        return dayjs(value).subtract(amount, unit);\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { AddPipe } from './add.pipe';\nimport { DateFormatPipe } from './date-format.pipe';\nimport { DifferencePipe } from './difference.pipe';\nimport { FromUnixPipe } from './from-unix.pipe';\nimport { ParsePipe } from './parse.pipe';\nimport { SubtractPipe } from './subtract.pipe';\n\nconst ANGULAR_DAYJS_PIPES = [\n  AddPipe,\n  DateFormatPipe,\n  DifferencePipe,\n  FromUnixPipe,\n  ParsePipe,\n  SubtractPipe,\n];\n\n@NgModule({\n  declarations: ANGULAR_DAYJS_PIPES,\n  exports: ANGULAR_DAYJS_PIPES\n})\nexport class DayjsModule { }\n"],"names":["Pipe","dayjs","NgModule"],"mappings":"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"}
